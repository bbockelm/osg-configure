#!/usr/bin/python

import os, sys, optparse, time, ConfigParser, StringIO, re, atexit, shutil, logging

from configure_osg.modules import exceptions
from configure_osg.modules import utilities




############################# Constant Definitions ############################

VERSION = '0.5.0'
CONFIGURE = 1
VERIFY = 2
LIST = 4
CONFIG_DIRECTORY = '/etc/osg'
LOG_FILE = '/var/log/osg/configure-osg.log'
job_environment_attributes = ['OSG_LOCATION',
                              'GLOBUS_LOCATION',
                              'OSG_SITE_NAME',
                              'GRID3_SITE_NAME',
                              'OSG_HOSTNAME',
                              'OSG_GRID',
                              'GRID3_BASE_DIR',
                              'OSG_APP',
                              'GRID3_APP_DIR',
                              'OSG_DATA',
                              'GRID3_DATA_DIR',
                              'GRID3_TMP_DIR',
                              'OSG_WN_TMP',
                              'GRID3_TMP_WN_DIR',
                              'OSG_STORAGE_ELEMENT',
                              'OSG_DEFAULT_SE',
                              'OSG_SITE_READ',
                              'OSG_SITE_WRITE',
                              'OSG_SQUID_LOCATION',
                              'OSG_JOB_CONTACT',
                              'OSG_GLEXEC_LOCATION']


############################# Global Variables ############################

# attributes dictionary has the following structure 
# key = attribute name
# value = tuple (attribute type, attribute value)
# attribute type is either local, main, or gip to indicate whether the attribute
# should is a local site attribute, osg attribute or gip attribute
attributes = {}



############################# Function Definitions ############################

  
def real_error_exit(logger, message="Critical error occurred, exiting", exception=None):
  """Function to do all the cleanup and exit if an error occurs"""  
  logger.critical(message)
  if exception is not None:
    logger.critical("Exception: %s" % (exception))
  sys.stderr.write("%s\n" % message)
  sys.stderr.write("You may be able to get more details rerunning configure-osg with the -d option " \
                   "and/or by examining %s\n" % (LOG_FILE))
  sys.exit(1)

def real_normal_exit(logger, message="Configuration completed, exiting..."):
  """Function to do all the cleanup and exit"""  
  logger.info(message)
  sys.stdout.write("%s\n" % message)
  sys.exit(0)
 
# The next two functions are redefined in the main() function once the logger
# has been set up
def error_exit(msg, exception=None):    
  sys.stderr.write("%s\n" % msg)
  sys.stderr.write("You may be able to get more details rerunning configure-osg with the -d option " \
                   "and/or by examining %s\n" % (LOG_FILE))
  sys.exit(1)

def normal_exit(msg):    
  sys.stdout.write("%s\n" % msg)
  sys.exit(0)
   
def get_configuration_modules(logger):
  """Instantiate and return modules in configure_modules directory"""  
  try:
    module_dirs = os.path.split(os.path.dirname(utilities.__file__))[0]
    modules = os.listdir(os.path.join(module_dirs, "configure_modules"))
  except OSError, exception:
    error_exit("Can't get configuration modules, exiting...", exception)
    
  objects = []
  for module in modules:      
    if module.split(".")[-1] == "py" and module != "__init__.py":
      module_name = module.split(".")[0]
      module_ref = __import__('configure_osg.configure_modules.' + module_name,
                              globals(),
                              locals(),
                              [''])
      objects.append(getattr(module_ref, module_ref.__all__[0])(logger=logger))
  return objects

  
def read_config_file(configuration_file, case_sensitive=False):
  """Read configuration file and return ConfigParse object for file"""
  config = ConfigParser.SafeConfigParser()
  local_config = ConfigParser.SafeConfigParser()
  
  # if case_sensitive is true then return a case sensitive parser
  if case_sensitive:    
    config.optionxform = str
    
  # read configuration file
  try:
    real_fp = open(configuration_file, 'r')
    string_fp = StringIO.StringIO(real_fp.read())    
    config.readfp(string_fp)
    if not utilities.valid_ini_file(configuration_file):
      error_mesg = "Invalid ini file, one or more sections are duplicated "
      error_mesg += "or a line with a setting starts with whitespace, "
      error_mesg += "exiting..."
      error_exit(error_mesg)
    if utilities.config_template(config):
      error_mesg = "config.ini file appears to be the default template file, "
      error_mesg += "please make sure that it has been properly filled out. "
      error_mesg += "Exiting..."
      error_exit(error_mesg)      
  except OSError, exception:
    error_exit("Can't read configuration file", exception)  
  except IOError, exception:
    error_exit("Can't read configuration file", exception)
  except ConfigParser.ParsingError, exception:
    error_exit("Can't parse configuration file", exception)
  
  return config

def save_config(configuration_file, logger):
  """
  Save configuration file to vdt location for gip to read and for future reference
  """
  backup_path = os.path.join(CONFIG_DIRECTORY, 'configs')
  if not os.path.exists(backup_path):
    os.mkdir(backup_path)
  os.chmod(backup_path, 0755)
   
  time_info = time.gmtime()
  
  backup_file = '%04d%02d%02d-%02d%02d%02d-config.ini' % (time_info[0],
                                                          time_info[1],
                                                          time_info[2],
                                                          time_info[3],
                                                          time_info[4],
                                                          time_info[5])
  backup_file = os.path.join(backup_path, backup_file)
  link_file = os.path.join(backup_path, 'current-config.ini')
  try:
    shutil.copy(configuration_file, backup_file)
    if os.path.exists(link_file):
      os.remove(link_file)
    os.symlink(backup_file, link_file)
  except Exception, ex:
    error_exit("Can't make copy of current config (%s)")
  
  
  

def write_attributes(attributes,
                     local_site_attributes,
                     job_environment_attributes):
  """Write out attributes to osg config files in output_directory"""
  # write out osg-attributes.conf
  # This does not write gip attributes since that needs to be done in the 
  # gip configure method in order for configure_gip to work
  try:
    filename = os.path.join(CONFIG_DIRECTORY, "osg-attributes.conf")
    utilities.write_attribute_file(filename, attributes)
  except IOError, exception:
    error_exit("Error writing attributes to osg-attributes.conf", exception)
     
    
  # write out osg-local-job-environment.conf
  try:
    filename = os.path.join(CONFIG_DIRECTORY, "osg-local-job-environment.conf")
    utilities.write_attribute_file(filename, local_site_attributes)
  except IOError, exception:
    error_exit("Error writing attributes to osg-local-job-attributes.conf", exception)


  # write out osg-job-environment.conf
  try:
    filename = os.path.join(CONFIG_DIRECTORY, "osg-job-environment.conf")
    temp = {}
    for key in job_environment_attributes:
      try:
        temp[key] = attributes[key]
      except KeyError, exception:
        error_exit("Missing job environment key (%s), exiting." % key, exception)      
    utilities.write_attribute_file(filename, temp)
  except IOError, exception:
    error_exit("Error writing attributes to osg-job-environment.conf", exception)

    
def configure_system(configuration_file, modules,
                     logger, configure_module=None, force=False):
  """Read configuration files and try to configure the osg system"""
  
  if not modules:
    error_exit("No modules found, exiting")
  if not utilities.valid_location(CONFIG_DIRECTORY):
    error_exit("Output directory %s not present" % CONFIG_DIRECTORY)
  if not utilities.valid_file(configuration_file):
    error_exit("Configuration file %s does not exist" % configuration_file)

  config = read_config_file(configuration_file)

  if not utilities.ce_config(config):
    logger.warning("No job managers enabled, assuming this is not a CE")

  for module in modules:
    try:
      if  module.__class__.__name__ == 'LocalSettings':
        local_config = read_config_file(configuration_file, True)
        module.parseConfiguration(local_config)
        continue
      else:
        module.parseConfiguration(config)
    except exceptions.SettingError, exception:
      error_exit("Error in %s while parsing configuration" % \
                 (module.__class__.__name__),
                 exception)
#    except ConfigParser.InterpolationSyntaxError, exception:
#      error_exit("Error while parsing configuration, check your variables for " +
#                 "a missing s after the paranthesis")
    except ConfigParser.ParsingError, exception:
      error_exit("Error while parsing configuration: %s" % exception)
    
  attributes = {}
  local_attributes = {}
  legacyConfig = None
  monalisaConfig = None
  localConfig = None
  for module in modules:
    if  module.__class__.__name__ == 'LocalSettings':
      local_attributes.update(module.getAttributes())

    if module.__class__.__name__ == 'LegacyConfiguration':
      # need to configuration LegacyConfiguration after other modules
      # since it derives it's settings from other modules
      # and uses the attributes dictionary for this
      legacyConfig = module
    elif module.__class__.__name__ == 'MonalisaConfiguration':
      # need to configuration MonaLisaConfiguration after other modules
      # since it derives it's settings from other modules
      # and uses the attributes dictionary for this
      monalisaConfig = module
    else:
      attributes.update(module.getAttributes())

  legacyConfig.configure(attributes)
  attributes.update(legacyConfig.getAttributes())
      
  
  if not check_configuration(modules, configuration_file, attributes, logger):
    if force:
      logger.warn("Invalid attributes found but forcing configuration.")
      sys.stderr.write("Invalid attributes found but forcing configuration.\n")
    else:
      error_exit("Invalid attributes found, exiting")
        
  for module in modules:
    logger.debug("Configuring %s" % (module.__class__.__name__))
    if configure_module is not None:
      if module.moduleName().lower() != configure_module:
        logger.debug("Skipping %s configuration" % (module.__class__.__name__))
        continue
    try:
      module.configure(attributes)
    except exceptions.ConfigureError, e:
      logger.debug("Got ConfigureError %s" % e)
      error_exit("Can't configure module, exiting")

  if configure_module is None:
    # need to configure monalisa after job managers
    monalisaConfig.configure(attributes)

  save_config(configuration_file, logger)
  if not utilities.ce_config(config):
    # no need to write out attribute files on non-ce installations
    return
  
  write_attributes(attributes,
                   local_attributes,
                   job_environment_attributes)

def verify_system(configuration_file, modules, logger):
  """Read configuration files and try to verify the configuration 
  to make sure that it's sane and points to valid information
  """
  if modules == []:
    error_exit("No modules found, exiting")

  if not utilities.valid_file(configuration_file):
    error_exit("Configuration file %s does not exist" % configuration_file)
  
  config = read_config_file(configuration_file)
  
  for module in modules:
    try:
      if  module.__class__.__name__ == 'LocalSettings':
        local_config = read_config_file(configuration_file, True)
        module.parseConfiguration(local_config)
        continue
      else:
        module.parseConfiguration(config)
    except exceptions.SettingError, exception:
      error_exit("Error in %s while parsing configuration" % (module.__class__.__name__),
                 exception)
#    except ConfigParser.InterpolationSyntaxError, exception:
#      error_exit("Error while parsing configuration, check your variables for " +
#                 "a missing s after the paranthesis")
    except ConfigParser.ParsingError, exception:
      error_exit("Error while parsing configuration: %s" % exception)
      
  attributes = {}
  local_attributes = {}
  legacyConfig = None
  for module in modules:
    if  module.__class__.__name__ == 'LocalSettings':
      local_attributes.update(module.getAttributes())
    if module.__class__.__name__ == 'LegacyConfiguration':
      # need to configuration LegacyConfiguration after other modules
      # since it derives it's settings from other modules
      # and uses the attributes dictionary for this
      legacyConfig = module
    else:
      attributes.update(module.getAttributes())

  legacyConfig.configure(attributes)
  attributes.update(legacyConfig.getAttributes())
      
  if not check_configuration(modules, configuration_file, attributes, logger):
    error_exit("Invalid attributes found, exiting")
  normal_exit("Configuration verified successfully")

def list_modules(modules, logger):
  """Print out a list of all modules available on the system
  """
  if modules == []:
    error_exit("No modules found, exiting")
  
  sys.stdout.write("%s%s\n" % ("Module name".ljust(30), "Can configure separately?".ljust(40)))
  for module in modules:
    name = module.moduleName()
    if  module.separatelyConfigurable():
      configurable = "Yes"
    else:
      configurable = "No"
    sys.stdout.write("%s%s\n" % (name.ljust(30), configurable.ljust(40)))                                    
  
  normal_exit("Modules listed successfully")
  
    
def check_configuration(modules, configuration_file, attributes, logger):
  """Read a configuration file and check it to make sure that it will work"""
  # get a list of configuration modules
  
  if modules == []:
    logger.warning("No configuration modules found")
    return False

  config = read_config_file(configuration_file)

  status = True
  for module in modules:
    status &= module.checkAttributes(attributes)
  return status
  
############################# Main Program ##############################

def main():
  global error_exit
  global normal_exit
  
  normal_exit_message = "Configuration completed, exiting..."
  error_exit_message = "Critical error occurred, exiting..."
    
  mode = None
  configure_mode = None
  
  parser = optparse.OptionParser(usage='Usage: %prog [options] arg1 arg2', version='%prog ' + VERSION)
  parser.add_option('-d',
                    '--debug',
                    action='store_true',
                    dest='debug',
                    default=False,
                    help='Output debugging information')
  parser.add_option('-v',
                    '--verify',
                    action='store_const',
                    const=VERIFY,
                    dest='mode',
                    help='Verify configuration and output an errors present')
  parser.add_option('-c',
                    '--configure',
                    action='store_const',
                    const=CONFIGURE,
                    dest='mode',
                    help='Configure osg software')
  parser.add_option('-l',
                    '--list',
                    action='store_const',
                    const=LIST,
                    dest='mode',
                    help='List configuration modules present')
  parser.add_option('-m',
                    '--module',
                    action='store',
                    dest='module',
                    help='Indicate module to configure')
  parser.add_option('-f',
                    '--force',
                    action='store_true',
                    dest='force',
                    default=False,
                    help='Force configuration despite any errors present')
  (options, args) = parser.parse_args()
  log_level = logging.INFO

  if options.debug == True:
    log_level = logging.DEBUG
  
  configure_module = None
  if options.mode == VERIFY:
    normal_exit_message = "Verification completed, exiting..."
  elif options.mode == LIST:
    normal_exit_message = "List modules completed, exiting..."
      
    
  configuration_file = os.path.join(CONFIG_DIRECTORY, 'config.ini')
    
  # setup logging
  try:
    logger = logging.getLogger('configure-osg')
    formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
    handler = logging.FileHandler(LOG_FILE, 'a')
    logger.setLevel(log_level)
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    console = logging.StreamHandler()
    console.setLevel(logging.ERROR)
    formatter = logging.Formatter('%(levelname)-8s %(message)s')
    console.setFormatter(formatter)
    logger.addHandler(console)
      
    error_exit = lambda mesg = error_exit_message, exception = None: real_error_exit(logger, mesg, exception)    
    normal_exit = lambda mesg = normal_exit_message: real_normal_exit(logger, mesg)
      
      
  except IOError:
    sys.stderr.write("Can't open %s for logging, exiting...\n" % LOG_FILE)
    sys.exit(1)
  
  try:
    # get a list of configuration modules
    modules = get_configuration_modules(logger)
    
    if options.mode == CONFIGURE:
      # configure settings
      configure_system(configuration_file, modules, 
                       logger, configure_module)
      pass
    elif options.mode == VERIFY:
      # verify settings
      verify_system(configuration_file, modules, logger)
    elif options.mode == LIST: 
      list_modules(modules, logger)
    else:
      parser.print_usage()
      error_exit("Must specify either -c, -v, or -l")
  except SystemExit:
    # needed since SystemExit inherits from Exception
    raise
  except Exception, e:
    sys.stderr.write("Please contact the developer, an unknown error occurred\n")
    error_exit("Unknown exception encountered while running: %s" % e)  
  
  normal_exit("Configure-osg completed successfully")
  
  
if __name__ == '__main__':
    main()
