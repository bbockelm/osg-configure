#!/usr/bin/python

import os, sys, optparse, time, ConfigParser, StringIO, re, atexit, shutil, logging

from osg_configure.modules import exceptions
from osg_configure.modules import utilities
from osg_configure.modules import configfile
from osg_configure.modules import validation


############################# Constant Definitions ############################

VERSION = '1.0.3'
CONFIGURE = 1
VERIFY = 2
LIST = 4
QUERY = 5
CONFIG_DIRECTORY = '/etc/osg'
OUTPUT_DIRECTORY = '/var/lib/osg'
LOG_FILE = '/var/log/osg/osg-configure.log'
job_environment_attributes = ['GLOBUS_LOCATION',
                              'OSG_SITE_NAME',
                              'OSG_HOSTNAME',
                              'OSG_GRID',
                              'OSG_APP',
                              'OSG_DATA',
                              'OSG_WN_TMP',
                              'OSG_STORAGE_ELEMENT',
                              'OSG_DEFAULT_SE',
                              'OSG_SITE_READ',
                              'OSG_SITE_WRITE',
                              'OSG_SQUID_LOCATION',
                              'OSG_JOB_CONTACT',
                              'OSG_GLEXEC_LOCATION']
# commented out since GRID3 variables are deprecated
#                              'GRID3_BASE_DIR',
#                              'GRID3_SITE_NAME',
#                              'GRID3_APP_DIR',
#                              'GRID3_DATA_DIR',
#                              'GRID3_TMP_DIR',
#                              'GRID3_TMP_WN_DIR']


############################# Global Variables ############################

# attributes dictionary has the following structure 
# key = attribute name
# value = tuple (attribute type, attribute value)
# attribute type is either local, main, or gip to indicate whether the attribute
# should is a local site attribute, osg attribute or gip attribute
attributes = {}



############################# Function Definitions ############################

  
def real_error_exit(logger, message="Critical error occurred, exiting", exception=None):
  """Function to do all the cleanup and exit if an error occurs"""  
  logger.critical(message)
  if exception is not None:
    logger.critical("Exception: %s" % (exception))
  sys.stderr.write("%s\n" % message)
  sys.stderr.write("You may be able to get more details rerunning %s with the -d " \
                   "option and/or by examining %s\n" % (sys.argv[0], LOG_FILE))
  sys.exit(1)

def real_normal_exit(logger, message="Configuration completed, exiting..."):
  """Function to do all the cleanup and exit"""  
  logger.info(message)
  sys.stdout.write("%s\n" % message)
  sys.exit(0)
 
# The next two functions are redefined in the main() function once the logger
# has been set up
def error_exit(msg, exception=None):    
  sys.stderr.write("%s\n" % msg)
  sys.stderr.write("You may be able to get more details rerunning %s with " \
                   "the -d option and/or by examining %s\n" % (sys.argv[0], LOG_FILE))
  sys.exit(1)

def normal_exit(msg):    
  sys.stdout.write("%s\n" % msg)
  sys.exit(0)
   
def get_configuration_modules(logger):
  """Instantiate and return modules in configure_modules directory"""  
  try:
    module_dirs = os.path.split(os.path.dirname(utilities.__file__))[0]
    modules = os.listdir(os.path.join(module_dirs, "configure_modules"))
  except OSError, exception:
    error_exit("Can't get configuration modules, exiting...", exception)
    
  objects = []
  for module in modules:      
    if module.split(".")[-1] == "py" and module != "__init__.py":
      module_name = module.split(".")[0]
      module_ref = __import__('osg_configure.configure_modules.' + module_name,
                              globals(),
                              locals(),
                              [''])
      objects.append(getattr(module_ref, module_ref.__all__[0])(logger=logger))
  return objects

  


def write_attributes(attributes,
                     local_site_attributes,
                     job_environment_attributes):
  """
  Write out attributes to osg config files in output_directory

  Keyword arguments:
  attributes -- osg attributes
  local_site_attributes -- local site attributes from ini file
  job_environment_attributes -- attributes for the job environment
  """
  # write out osg-attributes.conf
  # This does not write gip attributes since that needs to be done in the 
  # gip configure method in order for configure_gip to work
  # commented out per SOFTWARE-133
#  try:
#    filename = os.path.join(OUTPUT_DIRECTORY, "osg-attributes.conf")
#    utilities.write_attribute_file(filename, attributes)
#  except IOError, exception:
#    error_exit("Error writing attributes to osg-attributes.conf", exception)
     
    
  # write out osg-local-job-environment.conf
  try:
    filename = os.path.join(OUTPUT_DIRECTORY, "osg-local-job-environment.conf")
    utilities.write_attribute_file(filename, local_site_attributes)
  except IOError, exception:
    error_exit("Error writing attributes to osg-local-job-attributes.conf", exception)


  # write out osg-job-environment.conf
  try:
    filename = os.path.join(OUTPUT_DIRECTORY, "osg-job-environment.conf")
    temp = {}
    for key in job_environment_attributes:
      try:
        temp[key] = attributes[key]
      except KeyError, exception:
        error_exit("Missing job environment key (%s), exiting." % key, exception)      
    utilities.write_attribute_file(filename, temp)
  except IOError, exception:
    error_exit("Error writing attributes to osg-job-environment.conf", exception)

    
def configure_system(modules, logger, configure_module=None, force=False):
  """
  Read configuration files and try to configure the osg system
  
  Keyword arguments:
  modules -- list of module objects installed 
  logger -- logger instance to log messages to
  configure_module -- if not None, the specific module to configure
  force -- if True, force configuration even if verification fails
  """
  
  if not modules:
    error_exit("No modules found, exiting")
  if not validation.valid_location(CONFIG_DIRECTORY):
    error_exit("Output directory %s not present" % CONFIG_DIRECTORY)

  try:
    config = configfile.read_config_files()
  except IOError, e:
    error_exit("Can't read configuration files: %s" % e)

  if utilities.ce_installed() and not configfile.jobmanager_enabled(config):
    logger.error("The osg-ce package is installed but no jobmanager is enabled!")

  for module in modules:
    try:
      if  module.__class__.__name__ == 'LocalSettings':
        # Need to preserve case for variables being set in the environment
        local_config = configfile.read_config_files(case_sensitive = True)
        module.parseConfiguration(local_config)
        continue
      else:
        module.parseConfiguration(config)
    except exceptions.SettingError, exception:
      error_exit("Error in %s while parsing configuration" % \
                 (module.__class__.__name__),
                 exception)
#    except ConfigParser.InterpolationSyntaxError, exception:
#      error_exit("Error while parsing configuration, check your variables for " +
#                 "a missing s after the paranthesis")
    except ConfigParser.ParsingError, exception:
      error_exit("Error while parsing configuration: %s" % exception)
    
  attributes = {}
  local_attributes = {}
  # Commented out per SOFTWARE-133
  # legacyConfig = None
  monalisaConfig = None
  localConfig = None
  for module in modules:
    if  module.__class__.__name__ == 'LocalSettings':
      local_attributes.update(module.getAttributes())

    if module.__class__.__name__ == 'LegacyConfiguration':
      # need to configuration LegacyConfiguration after other modules
      # since it derives it's settings from other modules
      # and uses the attributes dictionary for this
#      legacyConfig = module
      # commented out per SOFTWARE-133
      continue
    elif module.__class__.__name__ == 'MonalisaConfiguration':
      # need to configuration MonaLisaConfiguration after other modules
      # since it derives it's settings from other modules
      # and uses the attributes dictionary for this
      monalisaConfig = module
    else:
      attributes.update(module.getAttributes())

  # Commented out per SOFTWARE-133
  # legacyConfig.configure(attributes)
  # attributes.update(legacyConfig.getAttributes())
      
  
  if not check_configuration(modules, attributes, logger):
    if force:
      logger.warn("Invalid attributes found but forcing configuration.")
      sys.stderr.write("Invalid attributes found but forcing configuration.\n")
    else:
      error_exit("Invalid attributes found, exiting")
        
  if configure_module is not None:
    # check whether the module we want to configure is present
    if configure_module not in [x.moduleName().lower() for x in modules]:
      error_exit("%s specified but that module is not present" % configure_module) 
    
  for module in modules:
    logger.debug("Configuring %s" % (module.__class__.__name__))
    if configure_module is not None:
      if module.moduleName().lower() != configure_module:
        logger.debug("Skipping %s configuration" % (module.__class__.__name__))
        continue
    try:
      module.configure(attributes)
    except exceptions.ConfigureError, e:
      logger.debug("Got ConfigureError %s" % e)
      error_exit("Can't configure module, exiting")

  if configure_module is None:
    # need to configure monalisa after job managers
    monalisaConfig.configure(attributes)

  if not utilities.ce_installed():
    # no need to write out attribute files on non-ce installations
    return
  
  write_attributes(attributes,
                   local_attributes,
                   job_environment_attributes)

def query_option(modules, logger, option=None):
  """
  Read configuration files and get the file a given option is defined in
  
  Arguments:
  modules -- list of module objects to verify 
  logger -- logger instance to log messages to
  option -- the option to search for given as section.option, 
            if section is omitted then, the each section is searched
  """
  if modules == []:
    error_exit("No modules found, exiting")

  if option is None:
    error_exit('No option given, exiting')
    
  try:
    config = configfile.read_config_files()
  except IOError, e:
    error_exit("Can't read configuration files: %s" % e)
  
  if '.' in option:
    (section, option_name) = option.split('.')
    if config.has_option(section, option_name):
      option_value = config.get(section, option_name)
    else:
      option_value = ''
    location = configfile.get_option_location(option_name, section)
    if location is None:
      sys.stdout.write("%s not found in section %s\n" % (option_name, section))
      normal_exit("Query completed")
    sys.stdout.write("%s %s %s %s\n" % ('Option'.ljust(20),
                                        'Section'.ljust(20),
                                        'Value'.ljust(30),
                                        'File'.ljust(30)))
    sys.stdout.write("%s %s %s %s\n" % (''.ljust(20, '-'),
                                        ''.ljust(20, '-'),
                                        ''.ljust(30, '-'),
                                        ''.ljust(30, '-'))) 
    sys.stdout.write("%s %s %s %s\n" % (option_name.ljust(20),
                                        section.ljust(20),
                                        option_value.ljust(30),
                                        location.ljust(30)))
    normal_exit("Query completed")
    
  section = None
  option_name = option
  # check all sections for option
  sys.stdout.write("%s %s %s %s\n" % ('Option'.ljust(20),
                                      'Section'.ljust(20),
                                      'Value'.ljust(30),
                                      'File'.ljust(30)))
  sys.stdout.write("%s %s %s %s\n" % (''.ljust(20, '-'),
                                      ''.ljust(20, '-'),
                                      ''.ljust(30, '-'),
                                      ''.ljust(30, '-')))
  for section_name in config.sections():
    location = configfile.get_option_location(option_name, section_name)
    if location is None:
      continue
    if config.has_option(section_name, option_name):
      option_value = config.get(section_name, option_name)
    else:
      option_value = ''
    sys.stdout.write("%s %s %s %s\n" % (option_name.ljust(20),
                                        section_name.ljust(20),
                                        option_value.ljust(30),
                                        location.ljust(30)))
  normal_exit("Query completed")
        
      


def verify_system(modules, logger):
  """
  Read configuration files and try to verify the configuration 
  to make sure that it's sane and points to valid information
  
  Keyword arguments:
  modules -- list of module objects to verify 
  logger -- logger instance to log messages to
  """
  if modules == []:
    error_exit("No modules found, exiting")

  try:
    config = configfile.read_config_files()
  except IOError, e:
    error_exit("Can't read configuration files: %s" % e)
  
  for module in modules:
    try:
      if  module.__class__.__name__ == 'LocalSettings':
        local_config = configfile.read_config_files(case_sensitive = True)
        module.parseConfiguration(local_config)
        continue
      else:
        module.parseConfiguration(config)
    except exceptions.SettingError, exception:
      error_exit("Error in %s while parsing configuration" % (module.__class__.__name__),
                 exception)
#    except ConfigParser.InterpolationSyntaxError, exception:
#      error_exit("Error while parsing configuration, check your variables for " +
#                 "a missing s after the paranthesis")
    except ConfigParser.ParsingError, exception:
      error_exit("Error while parsing configuration: %s" % exception)
      
  attributes = {}
  local_attributes = {}
  # Commented out per SOFTWARE-133
  # legacyConfig = None
  for module in modules:
    if  module.__class__.__name__ == 'LocalSettings':
      local_attributes.update(module.getAttributes())
    if module.__class__.__name__ == 'LegacyConfiguration':
      # need to configuration LegacyConfiguration after other modules
      # since it derives it's settings from other modules
      # and uses the attributes dictionary for this
      #legacyConfig = module
      #Commented out per SOFTWARE-133
      continue
    else:
      attributes.update(module.getAttributes())

  # Commented out per SOFTWARE-133
  # legacyConfig.configure(attributes)
  # attributes.update(legacyConfig.getAttributes())
      
  if not check_configuration(modules, attributes, logger):
    error_exit("Invalid attributes found, exiting")
  normal_exit("Configuration verified successfully")

def list_modules(modules, logger):
  """
  Print out a list of all modules available on the system

  Keyword arguments:
  modules -- list of module objects installed 
  logger -- logger instance to log messages to
  """
  if modules == []:
    error_exit("No modules found, exiting")
  
  sys.stdout.write("%s%s\n" % ("Module name".ljust(30), "Can configure separately?".ljust(40)))
  for module in modules:
    name = module.moduleName()
    if  module.separatelyConfigurable():
      configurable = "Yes"
    else:
      configurable = "No"
    sys.stdout.write("%s%s\n" % (name.ljust(30), configurable.ljust(40)))                                    
  
  normal_exit("Modules listed successfully")
  
    
def check_configuration(modules, attributes, logger):
  """
  Read a configuration file and check it to make sure that it will work

  Keyword arguments:
  modules -- list of module objects to check 
  logger -- logger instance to log messages to
  """
  # get a list of configuration modules
  
  if modules == []:
    logger.warning("No configuration modules found")
    return False

  try:
    config = configfile.read_config_files()
  except IOError, e:
    error_exit("Can't read configuration files: %s" % e)

  status = True
  for module in modules:
    status &= module.checkAttributes(attributes)
  return status
  
############################# Main Program ##############################

def main():
  global error_exit
  global normal_exit
  
  normal_exit_message = "Configuration completed, exiting..."
  error_exit_message = "Critical error occurred, exiting..."
    
  mode = None
  configure_mode = None
  
  parser = optparse.OptionParser(usage='Usage: %prog [options] arg1 arg2', version='%prog ' + VERSION)
  parser.add_option('-d',
                    '--debug',
                    action='store_true',
                    dest='debug',
                    default=False,
                    help='Output debugging information to /var/log/osg/osg-configure.log')
  parser.add_option('-v',
                    '--verify',
                    action='store_const',
                    const=VERIFY,
                    dest='mode',
                    help='Verify configuration and output an errors present')
  parser.add_option('-c',
                    '--configure',
                    action='store_const',
                    const=CONFIGURE,
                    dest='mode',
                    help='Configure osg software')
  parser.add_option('-l',
                    '--list',
                    action='store_const',
                    const=LIST,
                    dest='mode',
                    help='List configuration modules present')
  parser.add_option('-q',
                    '--query',
                    action='store_const',
                    const=QUERY,
                    dest='mode',
                    help='Query to see where a particular option is defined')
  parser.add_option('-o',
                    '--option',
                    action='store',
                    dest='option',
                    help='Specify option to query, formatted as section.option ' +
                          'with the section portion being optional')
  parser.add_option('-m',
                    '--module',
                    action='store',
                    dest='module',
                    default=None,
                    help='Indicate module to configure')
  parser.add_option('-f',
                    '--force',
                    action='store_true',
                    dest='force',
                    default=False,
                    help='Force configuration despite any errors present')
  parser.add_option('--verbose',
                    dest='verbose',
                    default=False,
                    help='Output all log messages to the console')
  (options, args) = parser.parse_args()
  log_level = logging.INFO

  if os.getuid() != 0:
    error_exit("You must be root when running %s" % sys.argv[0])
    
  if 'VDT_LOCATION' in os.environ:
    error_exit("$VDT_LOCATION exists in the environment, it looks like " +
               "the setup.sh from a pacman install exists in the environment " + 
               "exiting to avoid errors")
    
  if options.debug == True:
    sys.stdout.write("Writing debug information to /var/log/osg/osg-configure.log")
    log_level = logging.DEBUG
  
  configure_module = options.module
  if options.mode == VERIFY:
    normal_exit_message = "Verification completed, exiting..."
  elif options.mode == LIST:
    normal_exit_message = "List modules completed, exiting..."
      
        
  # setup logging
  try:
    logger = logging.getLogger('osg-configure')
    formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
    handler = logging.FileHandler(LOG_FILE, 'a')
    logger.setLevel(log_level)
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    console = logging.StreamHandler()
    console.setLevel(logging.WARNING)
    if options.verbose:
      console.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(levelname)-8s %(message)s')
    console.setFormatter(formatter)
    logger.addHandler(console)
      
    error_exit = lambda mesg = error_exit_message, exception = None: real_error_exit(logger, mesg, exception)    
    normal_exit = lambda mesg = normal_exit_message: real_normal_exit(logger, mesg)
      
      
  except IOError:
    sys.stderr.write("Can't open %s for logging, exiting...\n" % LOG_FILE)
    sys.exit(1)  
  
  try:
    # get a list of configuration modules
    modules = get_configuration_modules(logger)
    
    if options.mode == CONFIGURE:
      # configure settings
      configure_system(modules, logger, configure_module)
      pass
    elif options.mode == VERIFY:
      # verify settings
      verify_system(modules, logger)
    elif options.mode == LIST: 
      list_modules(modules, logger)
    elif options.mode == QUERY:
      query_option(modules, logger, option = options.option)
    else:
      parser.print_usage()
      error_exit("Must specify either -c, -v, or -l")
  except SystemExit:
    # needed since SystemExit inherits from Exception
    raise
  except Exception, e:
    sys.stderr.write("Please contact the developer, an unknown error occurred\n")
    error_exit("Unknown exception encountered while running: %s" % e)  
  
  normal_exit("%s completed" % (sys.argv[0],))
  
  
if __name__ == '__main__':
    main()
